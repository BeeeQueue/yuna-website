{"version":3,"sources":["js/index.ts"],"names":["el","document","querySelector","innerHTML","initialLogoHeight","initLogo","logo","clientHeight","body","onscroll","size","scroll","documentElement","scrollTop","newSize","Math","max","min","setAttribute","concat","classList","add","remove","addEventListener","lazyImages","querySelectorAll","window","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","image","target","src","dataset","srcset","onload","unobserve","observe","loadLazyImages","link","hash","URL","href","onclick","e","preventDefault","destination","getElementById","slice","scrollTo","top","offsetTop","behavior"],"mappings":"aAAA,IAAMA,EAAKC,SAASC,cAAc,eAC9BF,IACFA,EAAGG,UAAY,UAGjB,IAwBIC,EAAoB,EAClBC,EAAW,WACf,IAAMC,EAAOL,SAASC,cAAc,SACpCE,EAAoBE,EAAKC,aAMzBN,SAASO,KAAKC,SAAW,WACvB,IALeC,EAKTC,EAASV,SAASW,gBAAgBC,UAElCC,EAAUC,KAAKC,IACnB,GACAD,KAAKE,IAAIb,EAAmBA,EAAoBO,IAKlD,OAdeD,EAYPI,EAXRR,EAAKY,aAAa,QAAlB,WAAAC,OAAsCT,EAAtC,eAAAS,OAAwDT,EAAxD,OAac,IAAVC,EAAqBL,EAAKc,UAAUC,IAAI,SACxCV,EAAS,GAAWL,EAAKc,UAAUE,OAAO,cAA9C,IA2BJrB,SAASsB,iBAAiB,mBAAoB,YAvEvB,WACrB,IAAMC,EAAavB,SAASwB,iBAAiB,YAE7C,GAAI,yBAA0BC,OAAQ,CACpC,IAAMC,EAAW,IAAIC,qBAAqB,SAAAC,GACxCA,EAAQC,QAAQ,SAAAC,GACd,GAAKA,EAAMC,eAAX,CAEA,IAAMC,EAAQF,EAAMG,OACpBD,EAAME,IAAMF,EAAMG,QAAQD,IAC1BF,EAAMI,OAASJ,EAAMG,QAAQC,QAAU,GAEvCJ,EAAMK,OAAS,WACbL,EAAMb,UAAUE,OAAO,QACvBW,EAAMK,OAAS,MAEjBX,EAASY,UAAUN,QAIvBT,EAAWM,QAAQ,SAAAG,GAAK,OAAIN,EAASa,QAAQP,MAoD/CQ,GACApC,IAxBcJ,SAASwB,iBAAkC,cAEnDK,QAAQ,SAAAY,GAAQ,IACZC,EAAS,IAAIC,IAAIF,EAAKG,MAAtBF,KACI,MAARA,IAEJD,EAAKI,QAAU,SAAAC,GACbA,EAAEC,iBAGF,IAAMC,EAAchD,SAASiD,eAAeP,EAAKQ,MAAM,IAElDF,GAELhD,SAASW,gBAAgBwC,SAAS,CAChCC,IAAKJ,EAAYK,UAAY,GAC7BC,SAAU","file":"index.js","sourcesContent":["const el = document.querySelector('.below-fold')\nif (el) {\n  el.innerHTML = 'loaded'\n}\n\nconst loadLazyImages = () => {\n  const lazyImages = document.querySelectorAll('img.lazy')\n\n  if ('IntersectionObserver' in window) {\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (!entry.isIntersecting) return\n\n        const image = entry.target as HTMLImageElement\n        image.src = image.dataset.src as string\n        image.srcset = image.dataset.srcset || ''\n\n        image.onload = () => {\n          image.classList.remove('lazy')\n          image.onload = null\n        }\n        observer.unobserve(image)\n      })\n    })\n\n    lazyImages.forEach(image => observer.observe(image))\n  }\n}\n\nlet initialLogoHeight = 0\nconst initLogo = () => {\n  const logo = document.querySelector('.logo') as HTMLImageElement\n  initialLogoHeight = logo.clientHeight\n\n  const setSize = (size: number) => {\n    logo.setAttribute('style', `height: ${size}px; width: ${size}px`)\n  }\n\n  document.body.onscroll = () => {\n    const scroll = document.documentElement.scrollTop\n\n    const newSize = Math.max(\n      50,\n      Math.min(initialLogoHeight, initialLogoHeight - scroll),\n    )\n\n    setSize(newSize)\n\n    if (scroll >= 50) return logo.classList.add('small')\n    if (scroll < 50) return logo.classList.remove('small')\n  }\n}\n\nconst initHeaderLinks = () => {\n  const links = document.querySelectorAll<HTMLLinkElement>('header > a')\n\n  links.forEach(link => {\n    const { hash } = new URL(link.href)\n    if (hash == null) return\n\n    link.onclick = e => {\n      e.preventDefault()\n\n      // Slice to remove the #\n      const destination = document.getElementById(hash.slice(1))\n\n      if (!destination) return\n\n      document.documentElement.scrollTo({\n        top: destination.offsetTop - 50,\n        behavior: 'smooth',\n      })\n    }\n  })\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  loadLazyImages()\n  initLogo()\n  initHeaderLinks()\n})\n"]}