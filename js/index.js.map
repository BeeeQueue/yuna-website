{"version":3,"sources":["js/index.ts"],"names":["_this","this","initialLogoHeight","initLogo","logo","document","querySelector","clientHeight","body","onscroll","size","scroll","documentElement","scrollTop","newSize","Math","max","min","setAttribute","classList","add","remove","updateReleaseButton","latestRelease","platform","ext","navigator","match","downloadButton","getElementById","lastChild","innerHTML","tag_name","correctAsset","assets","find","release","name","endsWith","url","browser_download_url","onclick","ga","getAll","send","location","href","addEventListener","lazyImages","querySelectorAll","window","observer_1","IntersectionObserver","entries","forEach","entry","isIntersecting","image","target","src","dataset","srcset","onload","unobserve","observe","loadLazyImages","link","hash","URL","e","preventDefault","destination","slice","scrollTo","top","offsetTop","behavior","currentTarget","paused","__awaiter","cachedRelease","localStorage","getItem","updatedAt","Number","JSON","parse","isStale","Date","now","fetch","_a","sent","json","setItem","stringify","keys","obj","willReturn","counter","length","pick","toString"],"mappings":"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","file":"index.js","sourcesContent":["const pick = <K extends Array<keyof T>, T extends {}>(keys: K, obj: T) => {\n  const willReturn = {} as any\n  let counter = 0\n\n  while (counter < keys.length) {\n    if (keys[counter] in obj) {\n      willReturn[keys[counter]] = obj[keys[counter]]\n    }\n    counter++\n  }\n\n  return willReturn as Pick<T, K[number]>\n}\n\nconst loadLazyImages = () => {\n  const lazyImages = document.querySelectorAll('img.lazy')\n\n  if ('IntersectionObserver' in window) {\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (!entry.isIntersecting) return\n\n        const image = entry.target as HTMLImageElement\n        image.src = image.dataset.src as string\n        image.srcset = image.dataset.srcset || ''\n\n        image.onload = () => {\n          image.classList.remove('lazy')\n          image.onload = null\n        }\n        observer.unobserve(image)\n      })\n    })\n\n    lazyImages.forEach(image => observer.observe(image))\n  }\n}\n\nlet initialLogoHeight = 0\nconst initLogo = () => {\n  const logo = document.querySelector('.logo') as HTMLImageElement\n  initialLogoHeight = logo.clientHeight\n\n  const setSize = (size: number) => {\n    logo.setAttribute('style', `height: ${size}px; width: ${size}px`)\n  }\n\n  document.body.onscroll = () => {\n    const scroll = document.documentElement.scrollTop\n\n    const newSize = Math.max(\n      50,\n      Math.min(initialLogoHeight, initialLogoHeight - scroll),\n    )\n\n    setSize(newSize)\n\n    if (scroll >= 50) return logo.classList.add('small')\n    if (scroll < 50) return logo.classList.remove('small')\n  }\n}\n\nconst initHeaderLinks = () => {\n  const links = document.querySelectorAll<HTMLLinkElement>('header > a')\n\n  links.forEach(link => {\n    const { hash } = new URL(link.href)\n    if (hash === '') return\n\n    link.onclick = e => {\n      e.preventDefault()\n\n      // Slice to remove the #\n      const destination = document.getElementById(hash.slice(1))\n\n      if (!destination) return\n\n      document.documentElement.scrollTo({\n        top: destination.offsetTop - 50,\n        behavior: 'smooth',\n      })\n    }\n  })\n}\n\nconst initPlayer = () => {\n  const player = document.querySelector('video') as HTMLVideoElement\n\n  player.onclick = e => {\n    const target = e.currentTarget as HTMLVideoElement\n\n    target[target.paused ? 'play' : 'pause']()\n  }\n}\n\nconst getExtension = () => {\n  const { platform } = navigator\n\n  if (platform.match(/[wW]in/)) return '.exe'\n  if (platform.match(/[mM]ac/)) return '.dmg'\n}\n\ntype ThinRelease = Pick<GitHubRelease, 'assets' | 'name' | 'tag_name'>\nconst MINUTE = 1000 * 60\nconst getRelease = async () => {\n  let latestRelease: GitHubRelease | ThinRelease | null = null\n  const cachedRelease = localStorage.getItem('release')\n  const updatedAt = Number(localStorage.getItem('updatedAt') || 0)\n\n  if (cachedRelease) {\n    latestRelease = JSON.parse(cachedRelease) as ThinRelease\n\n    updateReleaseButton(latestRelease)\n  }\n\n  const isStale = updatedAt + MINUTE < Date.now()\n  if (!cachedRelease || isStale) {\n    const response = await fetch(\n      'https://api.github.com/repos/BeeeQueue/yuna/releases?page=1',\n    )\n    latestRelease = (await response.json())[0] as GitHubRelease\n\n    updateReleaseButton(latestRelease)\n\n    localStorage.setItem(\n      'release',\n      JSON.stringify(pick(['assets', 'name', 'tag_name'], latestRelease)),\n    )\n    localStorage.setItem('updatedAt', Date.now().toString())\n  }\n}\n\nconst updateReleaseButton = (latestRelease: ThinRelease) => {\n  const ext = getExtension()\n  const downloadButton = document.getElementById(\n    'download',\n  ) as HTMLButtonElement\n  ;(downloadButton.lastChild as HTMLParagraphElement).innerHTML =\n    latestRelease.tag_name\n\n  const correctAsset = latestRelease.assets.find(release =>\n    release.name.endsWith(ext || 'shabalabadoo'),\n  )\n  if (!correctAsset) return\n\n  const url = correctAsset.browser_download_url\n\n  downloadButton.onclick = () => {\n    ga.getAll()[0].send('send', 'event', 'action', 'download')\n\n    location.href = url\n  }\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  loadLazyImages()\n  initLogo()\n  initHeaderLinks()\n  initPlayer()\n\n  getRelease()\n})\n"]}