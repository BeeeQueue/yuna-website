{"version":3,"sources":["js/index.ts"],"names":["_this","this","initialLogoHeight","initLogo","logo","document","querySelector","clientHeight","body","onscroll","size","scroll","documentElement","scrollTop","newSize","Math","max","min","setAttribute","classList","add","remove","getRelease","__awaiter","latestRelease","localStorage","getItem","updatedAt","Number","cacheNotStale","Date","now","JSON","parse","fetch","_a","sent","json","setItem","stringify","toString","platform","navigator","ext","match","downloadButton","getElementById","url","assets","find","release","name","endsWith","browser_download_url","onclick","location","href","addEventListener","lazyImages","querySelectorAll","window","observer_1","IntersectionObserver","entries","forEach","entry","isIntersecting","image","target","src","dataset","srcset","onload","unobserve","observe","loadLazyImages","link","hash","URL","e","preventDefault","destination","slice","scrollTo","top","offsetTop","behavior"],"mappings":"22CAAAA,EAAAC,KAwBIC,EAAoB,EAClBC,EAAW,WACf,IAAMC,EAAOC,SAASC,cAAc,SACpCJ,EAAoBE,EAAKG,aAMzBF,SAASG,KAAKC,SAAW,WACvB,IALeC,EAKTC,EAASN,SAASO,gBAAgBC,UAElCC,EAAUC,KAAKC,IACnB,GACAD,KAAKE,IAAIf,EAAmBA,EAAoBS,IAKlD,OAdeD,EAYPI,EAXRV,EAAKc,aAAa,QAAS,WAAWR,EAAI,cAAcA,EAAI,MAa9C,IAAVC,EAAqBP,EAAKe,UAAUC,IAAI,SACxCT,EAAS,GAAWP,EAAKe,UAAUE,OAAO,cAA9C,IAmCEC,EAAa,WAAA,OAAAC,EAAAvB,OAAA,OAAA,EAAA,mFACbwB,EAAqBC,aAAaC,QAAQ,WACxCC,EAAYC,OAAOH,aAAaC,QAAQ,cAAgB,GAExDG,EAAgBF,EALX,MAK+BG,KAAKC,MAC1B,MAAjBP,GAAyBK,GAC3BL,EAAgBQ,KAAKC,MAAMT,UADzB,CAAA,EAAA,UAGe,MAAA,CAAA,EAAMU,MACrB,uEAEe,MAAA,CAAA,EAHAC,EAAAC,OAGeC,eAAhCb,EAAiBW,EAAAC,OAAuB,GAExCX,aAAaa,QAAQ,UAAWN,KAAKO,UAAUf,IAC/CC,aAAaa,QAAQ,YAAaR,KAAKC,MAAMS,oCArBvCC,EAAAC,UAAAD,SAwBFE,EAtBFF,EAASG,MAAM,UAAkB,OACjCH,EAASG,MAAM,UAAkB,YAArC,EAsBMC,EAAiBxC,SAASyC,eAC9B,YAEIC,EAAMvB,EAAcwB,OAAOC,KAAK,SAACC,GACrC,OAAAA,EAAQC,KAAKC,SAAST,KACtBU,qBAEFR,EAAeS,QAAU,WAAM,OAACC,SAASC,KAAOT,OAjC7B,IACXN,OAmCVpC,SAASoD,iBAAiB,mBAAoB,YA3GvB,WACrB,IAAMC,EAAarD,SAASsD,iBAAiB,YAE7C,GAAI,yBAA0BC,OAAQ,CACpC,IAAMC,EAAW,IAAIC,qBAAqB,SAAAC,GACxCA,EAAQC,QAAQ,SAAAC,GACd,GAAKA,EAAMC,eAAX,CAEA,IAAMC,EAAQF,EAAMG,OACpBD,EAAME,IAAMF,EAAMG,QAAQD,IAC1BF,EAAMI,OAASJ,EAAMG,QAAQC,QAAU,GAEvCJ,EAAMK,OAAS,WACbL,EAAMhD,UAAUE,OAAO,QACvB8C,EAAMK,OAAS,MAEjBX,EAASY,UAAUN,QAIvBT,EAAWM,QAAQ,SAAAG,GAAS,OAAAN,EAASa,QAAQP,MAwF/CQ,GACAxE,IA5DcE,SAASsD,iBAAkC,cAEnDK,QAAQ,SAAAY,GACJ,IAAAC,EAAA,IAAAC,IAAAF,EAAApB,MAAAqB,KACK,KAATA,IAEJD,EAAKtB,QAAU,SAAAyB,GACbA,EAAEC,iBAGF,IAAMC,EAAc5E,SAASyC,eAAe+B,EAAKK,MAAM,IAElDD,GAEL5E,SAASO,gBAAgBuE,SAAS,CAChCC,IAAKH,EAAYI,UAAY,GAC7BC,SAAU,eA+ChBhE","file":"index.js","sourcesContent":["const loadLazyImages = () => {\n  const lazyImages = document.querySelectorAll('img.lazy')\n\n  if ('IntersectionObserver' in window) {\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (!entry.isIntersecting) return\n\n        const image = entry.target as HTMLImageElement\n        image.src = image.dataset.src as string\n        image.srcset = image.dataset.srcset || ''\n\n        image.onload = () => {\n          image.classList.remove('lazy')\n          image.onload = null\n        }\n        observer.unobserve(image)\n      })\n    })\n\n    lazyImages.forEach(image => observer.observe(image))\n  }\n}\n\nlet initialLogoHeight = 0\nconst initLogo = () => {\n  const logo = document.querySelector('.logo') as HTMLImageElement\n  initialLogoHeight = logo.clientHeight\n\n  const setSize = (size: number) => {\n    logo.setAttribute('style', `height: ${size}px; width: ${size}px`)\n  }\n\n  document.body.onscroll = () => {\n    const scroll = document.documentElement.scrollTop\n\n    const newSize = Math.max(\n      50,\n      Math.min(initialLogoHeight, initialLogoHeight - scroll),\n    )\n\n    setSize(newSize)\n\n    if (scroll >= 50) return logo.classList.add('small')\n    if (scroll < 50) return logo.classList.remove('small')\n  }\n}\n\nconst initHeaderLinks = () => {\n  const links = document.querySelectorAll<HTMLLinkElement>('header > a')\n\n  links.forEach(link => {\n    const { hash } = new URL(link.href)\n    if (hash === '') return\n\n    link.onclick = e => {\n      e.preventDefault()\n\n      // Slice to remove the #\n      const destination = document.getElementById(hash.slice(1))\n\n      if (!destination) return\n\n      document.documentElement.scrollTo({\n        top: destination.offsetTop - 50,\n        behavior: 'smooth',\n      })\n    }\n  })\n}\n\nconst getExtension = () => {\n  const { platform } = navigator\n\n  if (platform.match(/[wW]in/)) return '.exe'\n  if (platform.match(/[mM]ac/)) return '.dmg'\n}\n\nconst HOUR = 1000 * 60 * 60\nconst getRelease = async () => {\n  let latestRelease: any = localStorage.getItem('release')\n  const updatedAt = Number(localStorage.getItem('updatedAt') || 0)\n\n  const cacheNotStale = updatedAt + HOUR >= Date.now()\n  if (latestRelease != null && cacheNotStale) {\n    latestRelease = JSON.parse(latestRelease)\n  } else {\n    const response = await fetch(\n      'https://api.github.com/repos/BeeeQueue/yuna/releases?page=1',\n    )\n    latestRelease = (await response.json())[0]\n\n    localStorage.setItem('release', JSON.stringify(latestRelease))\n    localStorage.setItem('updatedAt', Date.now().toString())\n  }\n\n  const ext = getExtension()\n  const downloadButton = document.getElementById(\n    'download',\n  ) as HTMLButtonElement\n  const url = latestRelease.assets.find((release: any) =>\n    release.name.endsWith(ext),\n  ).browser_download_url\n\n  downloadButton.onclick = () => (location.href = url)\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  loadLazyImages()\n  initLogo()\n  initHeaderLinks()\n\n  getRelease()\n})\n"]}